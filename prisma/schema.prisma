// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model Session {
    id        String   @id
    userId    String
    expiresAt DateTime
    user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model User {
    id String @id

    hashed_password      String?
    username             String     @unique
    email                String?    @unique
    google_sub           String?    @unique
    first_name           String?
    last_name            String?
    active               Boolean    @default(true)
    stripeEmail          String?
    image                String?
    stripeSessionId      String?    @unique
    stripeCustomerId     String?    @unique
    stripeSubscriptionId String?    @unique
    paidSubscription     Boolean    @default(false)
    cancelsAt            Int? // Unix timestamp for subscription cancellation
    accounts             Account[]
    sessions             Session[]
    posts                Post[]
    Favorite             Favorite[]
}

model Favorite {
    id        Int      @id @default(autoincrement())
    content   String
    userInput String // Field for storing the user's original input
    role      String?
    createdAt DateTime @default(now())
    userId    String // Associate each favorite with a user
    user      User     @relation(fields: [userId], references: [id])

    @@map("favorites")
}

model HistoricalStripe {
    id                   Int      @id @default(autoincrement())
    userId               String
    stripeCustomerId     String
    stripeSubscriptionId String?
    stripeEmail          String?
    createdAt            DateTime @default(now())

    @@index([userId], name: "idx_historical_stripe_user_id")
}

model VerificationToken {
    id         String   @id @default(cuid())
    identifier String   @unique
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
